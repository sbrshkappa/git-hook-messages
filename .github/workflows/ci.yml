name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Remove bin field for CI
      run: node scripts/ci-setup.js
    
    - name: Confirm bin field removed
      run: cat package.json
    
    - name: Remove node_modules and lock
      run: rm -rf node_modules package-lock.json
    
    - name: Clean npm cache
      run: npm cache clean --force
    - name: Install dependencies
      run: npm install
    
    - name: Build
      run: npm run build
    
    - name: Restore bin field
      run: node scripts/ci-restore.js
    
    - name: Run tests
      run: npm test
    
    - name: Run linting
      run: npm run lint

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Remove bin field for CI
      run: node scripts/ci-setup.js
    
    - name: Confirm bin field removed
      run: cat package.json
    
    - name: Remove node_modules and lock
      run: rm -rf node_modules package-lock.json
    
    - name: Clean npm cache
      run: npm cache clean --force
    - name: Install dependencies
      run: npm install
    
    - name: Build
      run: npm run build
    
    - name: Restore bin field
      run: node scripts/ci-restore.js
    
    - name: Run tests
      run: npm test
    
    - name: Setup npm authentication
      run: |
        # Clean any existing npm configuration
        rm -f ~/.npmrc
        rm -f $HOME/.npmrc
        
        # Set HOME environment variable explicitly
        export HOME=/home/runner
        
        # Check if NPM_TOKEN is set
        if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
          echo "ERROR: NPM_TOKEN secret is not set!"
          exit 1
        fi
        
        # Create fresh .npmrc with token
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
        echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
        echo "always-auth=true" >> ~/.npmrc
        
        # Verify npm configuration
        echo "=== npm config list ==="
        npm config list
        
        # Check if we can authenticate
        echo "=== npm whoami ==="
        npm whoami || {
          echo "ERROR: npm authentication failed!"
          echo "This usually means:"
          echo "1. NPM_TOKEN secret is not set in GitHub"
          echo "2. Token has expired or is invalid"
          echo "3. Token doesn't have publish permissions"
          echo "Please check your npm token at: https://www.npmjs.com/settings/tokens"
          exit 1
        }
        
        # Check if package already exists
        echo "=== checking if package exists ==="
        npm view dev-workflow-notifier || echo "Package does not exist yet - this is expected for first publish"
        
        # Verify token permissions
        echo "=== checking token permissions ==="
        npm token list || echo "Token list failed - this might be expected"
        
        # Check registry configuration
        echo "=== checking registry ==="
        npm config get registry
        npm config get scope
        
        # Test registry access
        echo "=== testing registry access ==="
        curl -s "https://registry.npmjs.org/dev-workflow-notifier" | head -20 || echo "Package not found in registry (expected for first publish)"
    
    - name: Publish to npm
      run: |
        export HOME=/home/runner
        
        # Ensure we're publishing as a new package
        echo "Publishing package: dev-workflow-notifier@1.0.0"
        echo "Package.json contents:"
        cat package.json
        
        # Verify authentication again before publish
        echo "=== verifying authentication before publish ==="
        npm whoami
        
        # Try to publish with explicit new package flag
        echo "=== dry run ==="
        npm publish --access public --dry-run || echo "Dry run completed"
        
        # Actual publish
        echo "=== actual publish ==="
        npm publish --access public
      env:
        HOME: /home/runner
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 